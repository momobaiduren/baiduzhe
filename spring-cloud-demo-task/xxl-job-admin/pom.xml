<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>spring-cloud-demo-task</artifactId>
        <groupId>com.springcloud</groupId>
        <version>1.0</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>xxl-job-admin</artifactId>

    <dependencies>

        <!-- starter-web：spring-webmvc + autoconfigure + logback + yaml + tomcat -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- starter-test：junit + spring-test + mockito -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>


        <!-- freemarker-starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>

        <!-- mail-starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>

        <!-- mybatis-starter：mybatis + mybatis-spring + tomcat-jdbc（default） -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>${mybatis-spring-boot-starter.version}</version>
        </dependency>
        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql-connector-java.version}</version>
        </dependency>

        <!-- quartz ：quartz-2.2.3/c3p0-0.9.1.1/slf4j-api-1.6.6 -->
        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
            <version>${quartz.version}</version>
        </dependency>

        <!-- xxl-job-core -->
        <dependency>
            <groupId>com.springcloud</groupId>
            <artifactId>xxl-job-core</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.17</version>
        </dependency>
        <!--    加入springcloud配置中心-->
        <!--    <dependency>-->
        <!--      <groupId>org.springframework.cloud</groupId>-->
        <!--      <artifactId>spring-cloud-starter-config</artifactId>-->
        <!--    </dependency>-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- 工程主入口-->
                    <mainClass>com.xxl.job.admin.XxlJobAdminApplication</mainClass>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.3.6</version>
                <!--将插件绑定在某个phase执行-->
                <executions>
                    <execution>
                        <id>build-image</id>
                        <!--将插件绑定在package这个phase上。也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build-->
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--                      <repository>${docker.image.prefix}/${project.artifactId}</repository>-->
                    <repository>${project.artifactId}</repository>
                    <buildArgs>
                        <JAR_FILE>target/${project.artifactId}-${project.version}.jar</JAR_FILE>
                    </buildArgs>
                </configuration>
            </plugin>
            <!--使用docker-maven-plugin插件-->
            <!--            <plugin>-->
            <!--                <groupId>com.spotify</groupId>-->
            <!--                <artifactId>docker-maven-plugin</artifactId>-->
            <!--                <version>1.0.0</version>-->

            <!--                &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>build-image</id>-->
            <!--                        &lt;!&ndash;将插件绑定在package这个phase上。也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build&ndash;&gt;-->
            <!--                        <phase>package</phase>-->
            <!--                        <goals>-->
            <!--                            <goal>build</goal>-->
            <!--                        </goals>-->
            <!--                    </execution>-->
            <!--                </executions>-->

            <!--                <configuration>-->
            <!--                    &lt;!&ndash;指定生成的镜像名&ndash;&gt;-->
            <!--                    <imageName>${project.artifactId}</imageName>-->
            <!--                    &lt;!&ndash;指定标签&ndash;&gt;-->
            <!--                    <imageTags>-->
            <!--                        <imageTag>latest</imageTag>-->
            <!--                    </imageTags>-->
            <!--                    &lt;!&ndash; 指定 Dockerfile 路径&ndash;&gt;-->
            <!--&lt;!&ndash;                    <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>&ndash;&gt;-->

            <!--&lt;!&ndash;                    &lt;!&ndash;指定远程 docker api地址&ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;                    <dockerHost>http://192.168.159.130:2375</dockerHost>&ndash;&gt;-->

            <!--                    &lt;!&ndash; 这里是复制 jar 包到 docker 容器指定目录配置 &ndash;&gt;-->
            <!--&lt;!&ndash;                    <resources>&ndash;&gt;-->
            <!--&lt;!&ndash;                        <resource>&ndash;&gt;-->
            <!--&lt;!&ndash;                            <targetPath>/</targetPath>&ndash;&gt;-->
            <!--&lt;!&ndash;                            &lt;!&ndash;jar 包所在的路径  此处配置的 即对应 target 目录&ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;                            <directory>${project.build.directory}</directory>&ndash;&gt;-->
            <!--&lt;!&ndash;                            &lt;!&ndash; 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　&ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;                            <include>${project.build.finalName}.jar</include>&ndash;&gt;-->
            <!--&lt;!&ndash;                        </resource>&ndash;&gt;-->
            <!--&lt;!&ndash;                    </resources>&ndash;&gt;-->
            <!--                </configuration>-->
            <!--            </plugin>-->
        </plugins>
    </build>
</project>