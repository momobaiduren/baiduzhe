<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.springcloud</groupId>
    <artifactId>spring-cloud-demo</artifactId>
    <version>1.0</version>
  </parent>
  <groupId>com.springcloud</groupId>
  <artifactId>spring-cloud-demo-eureka</artifactId>
  <version>1.0</version>
  <name>spring-cloud-demo-eureka</name>
  <description>注册中心</description>

  <dependencies>
    <!--表示为web工程-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
    </dependency>
    <!-- 安全认证 -->
    <!--    <dependency>-->
    <!--      <groupId>org.springframework.boot</groupId>-->
    <!--      <artifactId>spring-boot-starter-security</artifactId>-->
    <!--    </dependency>-->
    <!--暴露各种指标-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jolokia</groupId>
      <artifactId>jolokia-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
<!--      &lt;!&ndash;使用docker-maven-plugin插件&ndash;&gt;-->
<!--      <plugin>-->
<!--        <groupId>com.spotify</groupId>-->
<!--        <artifactId>docker-maven-plugin</artifactId>-->
<!--        <version>1.0.0</version>-->

<!--        &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;-->
<!--        <executions>-->
<!--          <execution>-->
<!--            <id>build-image</id>-->
<!--            &lt;!&ndash;将插件绑定在package这个phase上。也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build&ndash;&gt;-->
<!--            <phase>package</phase>-->
<!--            <goals>-->
<!--              <goal>build</goal>-->
<!--            </goals>-->
<!--          </execution>-->
<!--        </executions>-->

<!--        <configuration>-->
<!--          &lt;!&ndash;指定生成的镜像名&ndash;&gt;-->
<!--          <imageName>${docker.image.prefix}/${project.artifactId}</imageName>-->
<!--          &lt;!&ndash;指定标签&ndash;&gt;-->
<!--          <imageTags>-->
<!--            <imageTag>latest</imageTag>-->
<!--          </imageTags>-->
<!--          &lt;!&ndash; 指定 Dockerfile 路径&ndash;&gt;-->
<!--          <dockerDirectory>${project.basedir}</dockerDirectory>-->

<!--          &lt;!&ndash;指定远程 docker api地址&ndash;&gt;-->
<!--&lt;!&ndash;          <dockerHost>tcp://localhost:2375</dockerHost>&ndash;&gt;-->

<!--          &lt;!&ndash; 这里是复制 jar 包到 docker 容器指定目录配置 &ndash;&gt;-->
<!--          <resources>-->
<!--            <resource>-->
<!--              <targetPath>/</targetPath>-->
<!--              &lt;!&ndash;jar 包所在的路径  此处配置的 即对应 target 目录&ndash;&gt;-->
<!--              <directory>${project.build.directory}</directory>-->
<!--              &lt;!&ndash; 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　&ndash;&gt;-->
<!--              <include>${project.artifactId}-${project.version}.jar</include>-->
<!--            </resource>-->
<!--          </resources>-->
<!--        </configuration>-->
<!--      </plugin>-->


      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>dockerfile-maven-plugin</artifactId>
        <version>1.3.6</version>
        <configuration>
          <repository>${docker.image.prefix}/${project.artifactId}</repository>
          <buildArgs>
            <JAR_FILE>target/${project.artifactId}-${project.version}.jar</JAR_FILE>
          </buildArgs>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
